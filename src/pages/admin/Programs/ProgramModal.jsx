import React, { useEffect } from 'react';
import { Modal, Form, Input, Select, Row, Col, InputNumber, Button } from 'antd';

const { Option } = Select;
const { TextArea } = Input;

const ProgramModal = ({ visible, onCancel, onSubmit, editingRecord, universities }) => {
  const [form] = Form.useForm();

  useEffect(() => {
    if (visible) {
      if (editingRecord) {
        form.setFieldsValue(editingRecord);
      } else {
        form.resetFields();
      }
    }
  }, [visible, editingRecord, form]);

  const handleSubmit = (values) => {
    onSubmit(values);
    form.resetFields();
  };

  const currentYear = new Date().getFullYear();

  return (
    <Modal
      title={editingRecord ? "S·ª≠a ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o" : "Th√™m ch∆∞∆°ng tr√¨nh m·ªõi"}
      open={visible}
      onCancel={onCancel}
      footer={null}
      width={700}
      destroyOnClose
    >
      <Form
        form={form}
        layout="vertical"
        onFinish={handleSubmit}
        initialValues={{
          Year: currentYear,
          TuitionUnit: 'h·ªçc k·ª≥'
        }}
      >
        <Form.Item 
          name="Name" 
          label="T√™n ch∆∞∆°ng tr√¨nh" 
          rules={[
            { required: true, message: 'Vui l√≤ng nh·∫≠p t√™n ch∆∞∆°ng tr√¨nh' },
            { min: 5, message: 'T√™n ch∆∞∆°ng tr√¨nh ph·∫£i c√≥ √≠t nh·∫•t 5 k√Ω t·ª±' },
            { max: 100, message: 'T√™n ch∆∞∆°ng tr√¨nh kh√¥ng ƒë∆∞·ª£c qu√° 100 k√Ω t·ª±' }
          ]}
        >
          <Input placeholder="VD: C·ª≠ nh√¢n C√¥ng ngh·ªá Th√¥ng tin" />
        </Form.Item>

        <Form.Item 
          name="UniversityId" 
          label="Tr∆∞·ªùng ƒë·∫°i h·ªçc" 
          rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn tr∆∞·ªùng ƒë·∫°i h·ªçc' }]}
        >
          <Select placeholder="Ch·ªçn tr∆∞·ªùng ƒë·∫°i h·ªçc">
            {universities.map(uni => (
              <Option key={uni.Id} value={uni.Id}>
                {uni.Name}
              </Option>
            ))}
          </Select>
        </Form.Item>

        <Form.Item 
          name="Description" 
          label="M√¥ t·∫£ ch∆∞∆°ng tr√¨nh"
          rules={[
            { required: true, message: 'Vui l√≤ng nh·∫≠p m√¥ t·∫£ ch∆∞∆°ng tr√¨nh' },
            { min: 20, message: 'M√¥ t·∫£ ph·∫£i c√≥ √≠t nh·∫•t 20 k√Ω t·ª±' },
            { max: 1000, message: 'M√¥ t·∫£ kh√¥ng ƒë∆∞·ª£c qu√° 1000 k√Ω t·ª±' }
          ]}
        >
          <TextArea 
            rows={4} 
            placeholder="Nh·∫≠p m√¥ t·∫£ chi ti·∫øt v·ªÅ ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o..."
            showCount
            maxLength={1000}
          />
        </Form.Item>

        <Row gutter={16}>
          <Col span={12}>
            <Form.Item 
              name="Tuition" 
              label="H·ªçc ph√≠ (VNƒê)"
              rules={[
                { required: true, message: 'Vui l√≤ng nh·∫≠p h·ªçc ph√≠' },
                { type: 'number', min: 0, message: 'H·ªçc ph√≠ ph·∫£i l·ªõn h∆°n 0' }
              ]}
            >
              <InputNumber 
                placeholder="VD: 12000000"
                style={{ width: '100%' }}
                min={0}
                step={1000000}
                formatter={value => `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',')}
                parser={value => value.replace(/\$\s?|(,*)/g, '')}
              />
            </Form.Item>
          </Col>
          <Col span={12}>
            <Form.Item 
              name="TuitionUnit" 
              label="ƒê∆°n v·ªã t√≠nh h·ªçc ph√≠"
              rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn ƒë∆°n v·ªã t√≠nh' }]}
            >
              <Select placeholder="Ch·ªçn ƒë∆°n v·ªã t√≠nh">
                <Option value="h·ªçc k·ª≥">H·ªçc k·ª≥</Option>
                <Option value="nƒÉm h·ªçc">NƒÉm h·ªçc</Option>
                <Option value="kh√≥a h·ªçc">Kh√≥a h·ªçc</Option>
                <Option value="t√≠n ch·ªâ">T√≠n ch·ªâ</Option>
              </Select>
            </Form.Item>
          </Col>
        </Row>

        <Form.Item 
          name="Year" 
          label="NƒÉm √°p d·ª•ng"
          rules={[
            { required: true, message: 'Vui l√≤ng ch·ªçn nƒÉm' },
            { type: 'number', min: 2020, max: currentYear + 5, message: `NƒÉm ph·∫£i t·ª´ 2020-${currentYear + 5}` }
          ]}
        >
          <Select placeholder="Ch·ªçn nƒÉm √°p d·ª•ng">
            {Array.from({ length: 10 }, (_, i) => currentYear - 2 + i).map(year => (
              <Option key={year} value={year}>{year}</Option>
            ))}
          </Select>
        </Form.Item>

        <div className="bg-yellow-50 p-4 rounded-lg mb-4">
          <h4 className="text-sm font-semibold text-yellow-800 mb-2">üí° G·ª£i √Ω m√¥ t·∫£:</h4>
          <ul className="text-sm text-yellow-700 space-y-1">
            <li>‚Ä¢ Th·ªùi gian ƒë√†o t·∫°o (s·ªë nƒÉm/h·ªçc k·ª≥)</li>
            <li>‚Ä¢ H√¨nh th·ª©c ƒë√†o t·∫°o (ch√≠nh quy, li√™n th√¥ng, t·ª´ xa...)</li>
            <li>‚Ä¢ B·∫±ng c·∫•p c·∫•p (C·ª≠ nh√¢n, Th·∫°c sƒ©, Ti·∫øn sƒ©...)</li>
            <li>‚Ä¢ ƒê·ªëi t∆∞·ª£ng tuy·ªÉn sinh v√† ƒëi·ªÅu ki·ªán</li>
            <li>‚Ä¢ C∆° h·ªôi vi·ªác l√†m sau t·ªët nghi·ªáp</li>
          </ul>
        </div>

        <div className="flex justify-end space-x-2 pt-4 border-t">
          <Button onClick={onCancel}>
            H·ªßy
          </Button>
          <Button type="primary" htmlType="submit">
            {editingRecord ? 'C·∫≠p nh·∫≠t' : 'Th√™m m·ªõi'}
          </Button>
        </div>
      </Form>
    </Modal>
  );
};

export default ProgramModal; 